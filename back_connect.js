// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_URL = 'http://localhost:8000';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentChatType = 'website';
let chatHistory = {
    design: [],
    website: []
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Initializing DAPP...');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
    setTimeout(() => {
        initializeSwitchers();
        initializeChat();
        initializeImageDisplay();
        console.log('‚úÖ DAPP initialized successfully');
    }, 100);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –≤–∫–ª–∞–¥–æ–∫
function initializeSwitchers() {
    const switches = document.querySelectorAll('[data-switch]');
    console.log('Found switches:', switches.length);
    
    switches.forEach(switchBtn => {
        switchBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('Switch clicked:', switchBtn.getAttribute('data-switch'));
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö
            switches.forEach(s => s.classList.remove('_active'));
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
            switchBtn.classList.add('_active');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —á–∞—Ç–∞
            currentChatType = switchBtn.getAttribute('data-switch');
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            toggleDisplay(currentChatType);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            loadChatHistory(currentChatType);
        });
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–∂–¥—É design –∏ website
function toggleDisplay(type) {
    const websiteView = document.querySelector('.dapp__website');
    const designView = document.querySelector('.dapp__design');
    
    console.log('Toggling display to:', type);
    
    if (type === 'website') {
        websiteView.classList.add('_active');
        designView.classList.remove('_active');
    } else {
        websiteView.classList.remove('_active');
        designView.classList.add('_active');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
function initializeChat() {
    const input = document.querySelector('.dapp__input input');
    const button = document.querySelector('.dapp__input button');
    
    console.log('Initializing chat...');
    console.log('Input found:', !!input);
    console.log('Button found:', !!button);
    
    if (!input || !button) {
        console.error('‚ùå Input or button not found!');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
    button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('üñ±Ô∏è Button clicked!');
        sendMessage();
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            console.log('‚å®Ô∏è Enter pressed!');
            sendMessage();
        }
    });
    
    console.log('‚úÖ Chat initialized');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const input = document.querySelector('.dapp__input input');
    const userMessage = input.value.trim();
    
    console.log('üì§ Sending message:', userMessage);
    
    if (!userMessage) {
        console.log('‚ö†Ô∏è Empty message, skipping');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    addMessageToChat(userMessage, 'user');
    
    // –û—á–∏—â–∞–µ–º input
    input.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingMsg = currentChatType === 'design' 
        ? 'Generating logo and banner...' 
        : 'Generating website mockup...';
    addMessageToChat(loadingMsg, 'ai', true);
    
    try {
        console.log('üåê Sending request to API...');
        console.log('Chat type:', currentChatType);
        console.log('API URL:', API_URL);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend
        const response = await fetch(`${API_URL}/generate-images`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_prompt: userMessage,
                chat_type: currentChatType
            })
        });
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå API error:', errorText);
            throw new Error('Failed to generate images');
        }
        
        const data = await response.json();
        console.log('‚úÖ Response received:', data);
        
        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        removeLoadingMessage();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI
        const successMsg = currentChatType === 'design'
            ? `‚úì Successfully generated ${data.images.length} images (logo + banner)`
            : '‚úì Website mockup generated successfully!';
        addMessageToChat(successMsg, 'ai');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        displayImages(data.images, data.type);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chatHistory[currentChatType].push({
            userMessage,
            images: data.images
        });
        
        console.log('‚úÖ Message sent successfully!');
        
    } catch (error) {
        console.error('‚ùå Error:', error);
        removeLoadingMessage();
        addMessageToChat('‚úó Error generating images. Please try again.', 'ai');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessageToChat(message, type, isLoading = false) {
    const chatContainer = document.querySelector('.dapp__chat');
    const messageDiv = document.createElement('div');
    messageDiv.className = `dapp__message _${type}`;
    if (isLoading) {
        messageDiv.classList.add('_loading');
    }
    messageDiv.textContent = message;
    chatContainer.appendChild(messageDiv);
    
    console.log(`üí¨ Added ${type} message:`, message);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function removeLoadingMessage() {
    const loadingMessage = document.querySelector('.dapp__message._loading');
    if (loadingMessage) {
        loadingMessage.remove();
        console.log('üóëÔ∏è Loading message removed');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function displayImages(images, type) {
    console.log('üñºÔ∏è Displaying images:', images);
    if (type === 'design') {
        displayDesignImages(images);
    } else if (type === 'website') {
        displayWebsiteImage(images);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Design –≤–∫–ª–∞–¥–∫–∏ (–ª–æ–≥–æ + –±–∞–Ω–Ω–µ—Ä)
function displayDesignImages(images) {
    console.log('üé® Displaying design images');
    const designView = document.querySelector('.dapp__design');
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    const logoContainer = designView.querySelector('.dapp__logos');
    const imgsContainer = designView.querySelector('.dapp__imgs');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    logoContainer.innerHTML = '';
    imgsContainer.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤
    const twoContainer = document.createElement('div');
    twoContainer.className = 'dapp__two';
    imgsContainer.appendChild(twoContainer);
    
    images.forEach((img, index) => {
        console.log(`Adding ${img.type} image:`, img.url);
        
        if (img.type === 'logo') {
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const logoImg = document.createElement('img');
            logoImg.src = img.url;
            logoImg.alt = 'Generated Logo';
            logoImg.style.opacity = '0';
            logoImg.style.transform = 'scale(0.8)';
            logoImg.style.transition = 'all 0.5s ease';
            logoContainer.appendChild(logoImg);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                logoImg.style.opacity = '1';
                logoImg.style.transform = 'scale(1)';
            }, 100);
            
        } else if (img.type === 'banner') {
            // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–Ω–Ω–µ—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const bannerImg = document.createElement('img');
            bannerImg.src = img.url;
            bannerImg.alt = 'Generated Banner';
            bannerImg.style.opacity = '0';
            bannerImg.style.transform = 'translateY(20px)';
            bannerImg.style.transition = 'all 0.5s ease';
            twoContainer.appendChild(bannerImg);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                bannerImg.style.opacity = '1';
                bannerImg.style.transform = 'translateY(0)';
            }, 300 * (index + 1));
        }
    });
    
    console.log('‚úÖ Design images displayed');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Website –≤–∫–ª–∞–¥–∫–∏
function displayWebsiteImage(images) {
    console.log('üåê Displaying website image');
    const websiteView = document.querySelector('.dapp__website');
    
    if (images.length > 0) {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        websiteView.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        const img = document.createElement('img');
        img.src = images[0].url;
        img.alt = 'Generated Website';
        img.style.opacity = '0';
        img.style.transform = 'scale(0.95)';
        img.style.transition = 'all 0.6s ease';
        
        websiteView.appendChild(img);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            img.style.opacity = '1';
            img.style.transform = 'scale(1)';
        }, 100);
        
        console.log('‚úÖ Website image displayed');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
function loadChatHistory(type) {
    const chatContainer = document.querySelector('.dapp__chat');
    chatContainer.innerHTML = '';
    
    console.log('üìú Loading chat history for:', type);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (type === 'design') {
        addMessageToChat('üëã Hello! I can generate logo and banner images for your project. What would you like to create?', 'ai');
    } else {
        addMessageToChat('üëã Hello! I can generate website mockup designs. Describe your ideal website!', 'ai');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chatHistory[type].forEach(item => {
        addMessageToChat(item.userMessage, 'user');
        const successMsg = type === 'design'
            ? `‚úì Successfully generated ${item.images.length} images (logo + banner)`
            : '‚úì Website mockup generated successfully!';
        addMessageToChat(successMsg, 'ai');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        displayImages(item.images, type);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function initializeImageDisplay() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    loadChatHistory(currentChatType);
    console.log('üñºÔ∏è Image display initialized');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
fetch(`${API_URL}/health`)
    .then(res => res.json())
    .then(data => {
        console.log('‚úÖ API health check:', data);
    })
    .catch(err => {
        console.error('‚ùå API not available:', err);
    });